// -linear-gradient() v0.9.6.5 | Public Domain

// whether to include -webkit-gradient(linear, ...) for iOS4- and Gingerbread-
$supportLegacyWebKit: true; // uses 
// whether to include data-URI encoded SVG gradients for IE9
$supportIE9: true;

@function convertColorToEncodedRGBNotation($color) {
  $red: red($color);
  $green: green($color);
  $blue: blue($color);
  $alpha: alpha($color);
  @if $alpha == 1 {
    // rgb(r, g, b)
    @return "rgb%28" + $red + "%2C" + $green + "%2C" + $blue + "%29";
  }
  @else {
    // rgba(r, g, b, a)
    @return "rgba%28" + $red + "%2C" + $green + "%2C" + $blue + "%2C" + $alpha + "%29"; 
  }
}

@function convertColorstop($colorstop, $output) {
  $stop: null;
  $color: null;

  $result: 'error';

  @if length($colorstop) == 2 {
    $cs1: nth($colorstop, 1);
    $cs2: nth($colorstop, 2);
    @if type_of($cs1) == "color" {
      $color: $cs1;
    }
    @if type_of($cs2) == "number" {
      // convert unitless zero to 0%
      @if $cs2 == 0 {
        $stop: 0%;
      }
      // all stops needs to be <percentage>s
      @else if unit($cs2) == "%" {
        $stop: $cs2;
      }
      @else { // FAIL
        // $stop: error($cs2);
        @return $result;
      }
    }
    @if $output == "webkit" {
      // @return color-stop($stop, $color);
      $result: color-stop($stop, $color);
      @return $result;
    }
    @else if $output == "svg" {
      // @return "%3Cstop%20offset%3D%22" + $stop + "25%22%20stop-color%3D%22" + convertColorToEncodedRGBNotation($color) + "%22%2F%3E";
      $result: "%3Cstop%20offset%3D%22" + $stop + "25%22%20stop-color%3D%22" + convertColorToEncodedRGBNotation($color) + "%22%2F%3E";
      @return $result;
    }
    @else {
      // @return error($output);
      @return $result;
    }
  }
  @else if $colorstop == null {
    @return null;
  }
  @else { // FAIL
    // @return error($colorstop);
    @return $result;
  }
}

@mixin -linear-gradient($first, $rest...) {
  // variables for the standard syntax
  $standardDir: false; // can be null in case of the gradient goes from top bottom
  $colorstop: false;

  // prefix(es) to include
  // Note: there's no need for including -moz-, -ms-, and -o- as of Nov 2012.
  $prefixes: -webkit-;

  // variables used in -webkit-gradient()
  $legacyWebKitDir: false;
  $legacyWebKitColorstop: null;

  // webkit directional keywords
  $lefttop: 0 0;
  $leftbtm: 0 100%;
  $righttop: 100% 0;
  $rightbtm: 100% 100%;
  $downward: $lefttop, $leftbtm;
  $leftword: $lefttop, $righttop;
  $upward: $leftbtm, $lefttop;
  $rightward: $righttop, $lefttop;

  @if not $supportLegacyWebKit {
    $legacyWebKitDir: null;
  }

  // variables used in SVG gradients
  $svgDir: false;
  $svgColorstop: '';

  // svg directional keywords
  // x1, x2, y1, y2 attributes
  // _0 -> 0%, _1 -> 100%
  $x1_0: ''; // '%20x1%3D%220%25%22'; // default
  $x1_1: '%20x1%3D%22100%25%22';
  $x2_0: '%20x2%3D%220%25%22';
  $x2_1: ''; // '%20x2%3D%22100%25%22'; // default
  $y1_0: ''; // '%20y1%3D%220%25%22'; // default
  $y1_1: '%20y1%3D%22100%25%22';
  $y2_0: ''; // '%20y2%3D%220%25%22'; // default
  $y2_1: '%20y2%3D%22100%25%22';

  $svgdownward: $x2_0 + $y2_1; // ' x2="0%" y2="100%"'
  $svgleftward: $x1_1 + $x2_0; // ' x1="100% x2="0%"'
  $svgupward: $y1_1 + $x2_0; // ' y1="100%" x2="0%"'
  $svgrightward: $x1_0 + $x2_1; // ' x1="0%" x2="100%"'

  $svgtobtmright: $x1_0 + $y1_0 + $x2_1 + $y2_1;
  $svgtobtmleft: $x1_1 + $y1_0 + $x2_0 + $y2_1;
  $svgtotopleft: $x1_1 + $y1_1 + $x2_0 + $y2_0;
  $svgtotopright: $x1_0 + $y1_1 + $x2_1 + $y2_0;

  @if not $supportIE9 {
    $svgDir: null;
  }

  // angles
  @if type_of($first) == "number" and unit($first) == "deg" {

    @if $supportLegacyWebKit {
      @if index((-990, -630, -270, 90, 450, 810), $first) {
        $legacyWebKitDir: $downward;
      }
      @else if index((-900, -540, -180, 180, 540, 900), $first) {
        $legacyWebKitDir: $leftword;
      }
      @else if index((-810, -450, -90, 270, 630, 990), $first) {
        $legacyWebKitDir: $upward;
      }
      @else if index((-1080, -720, -360, 0, 360, 720, 1080), $first) {
        $legacyWebKitDir: $rightward;
      }
    }

    @if $supportIE9 {
      @if index((-990, -630, -270, 90, 450, 810), $first) {
        $svgDir: $svgdownward;
      }
      @else if index((-900, -540, -180, 180, 540, 900), $first) {
        $svgDir: $svgleftword;
      }
      @else if index((-810, -450, -90, 270, 630, 990), $first) {
        $svgDir: $svgupward;
      }
      @else if index((-1080, -720, -360, 0, 360, 720, 1080), $first) {
        $svgDir: $svgrightward;
      }
    }

    // if it goes from top to bottom
    @if index((-990, -630, -270, 90, 450, 810), $first) {
      $standardDir: null;
    }
    @else {
      // hope 1080 is enough...
      @for $i from -1080 through 1080 {
        @if $i == $first {
          $standardDir: abs($first - 450) % 360;
        }
      }
    }
    $colorstop: $rest;
  }

  // contains only colorstops: no keywords nor angles
  @else if type_of(nth($first, 1)) == "color" {
    $standardDir: null;
    $colorstop: join($first, $rest, comma);
  }

  // assuming else are keywords
  @else {
    // map like
    $mapCSSKeyword: (
      (top, right, bottom, left, top left, top right, right top, right bottom, bottom right, bottom left, left top, left bottom)
      (null, to left, to top, to right, to bottom right, to bottom left, to bottom left, to top left, to top left, to top right, to bottom right, to top right)
    );
    // $mapWebKitKeyword: ((left top, left bottom), (left top, right top), (left bottom, left top), (right top, left top), (left top, right bottom), (right top, left bottom), (right top, left botoom), (right bottom, left top), (right bottom, left top), (left bottom, right top), (left top, right bottom), (left bottom, right top));
    $mapWebKitKeyword: (($downward), ($leftword), ($upward), ($rightward), ($lefttop, $rightbtm), ($righttop, $leftbtm), ($righttop, $leftbtm), ($rightbtm, $lefttop), ($rightbtm, $lefttop), ($leftbtm, $righttop), ($lefttop, $rightbtm), ($leftbtm, $righttop));

    $mapSVGKeyword: (($svgdownward), ($svgleftward), ($svgupward), ($svgrightward), ($svgtobtmright), ($svgtobtmleft), ($svgtobtmleft), ($svgtotopleft), ($svgtotopleft), ($svgtotopright), ($svgtobtmright), ($svgtotopright));

    // whether keyword found
    $idx: index(nth($mapCSSKeyword, 1), $first);
    @if $idx {
      $standardDir: nth(nth($mapCSSKeyword, 2), $idx);
      $colorstop: $rest;
      @if $supportLegacyWebKit {
        $legacyWebKitDir: nth($mapWebKitKeyword, $idx);
      }
      @if $supportIE9 {
        $svgDir: nth($mapSVGKeyword, $idx);
      }
    }
  }

  // finally
  @if $colorstop {

    @if $supportIE9 {
      // flag
      $noerror: true;

      @each $cs in $colorstop {
        $convertedColorstop: convertColorstop($cs, 'svg');
        @if $convertedColorstop != "error" {
          $svgColorstop: $svgColorstop + $convertedColorstop;
        }
        @else {
          $noerror: false;
        }
      }
      // all clear!
      @if $noerror {
        $svgData: 'data:image/svg+xml,' + '%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E' + '%3ClinearGradient%20id%3D%22g%22' + $svgDir + '%3E' + $svgColorstop + '%3C%2FlinearGradient%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22url(%23g)%22%2F%3E%3C%2Fsvg%3E';
;
        background-image: url($svgData);
      }
    }

    @if $supportLegacyWebKit {
      // flag
      $noerror: true;

      @each $cs in $colorstop {
        $convertedColorstop: convertColorstop($cs, 'webkit');

        @if $convertedColorstop != "error" {
          $legacyWebKitColorstop: join($legacyWebKitColorstop, convertColorstop($cs, 'webkit'), comma);
        }
        @else {
          $noerror: false;
        }
      }
      @if $noerror {
        background-image: -webkit-gradient(linear, $legacyWebKitDir, $legacyWebKitColorstop);
      }
    }
    // if it is a top-to-bottom, put only colorstops
    @if $standardDir == null {
      @each $prefix in $prefixes {
      background-image: #{$prefix}linear-gradient($colorstop); }
      background-image: linear-gradient($colorstop);
    }
    @else if $standardDir {
      @each $prefix in $prefixes {
      background-image: #{$prefix}linear-gradient(($first, $colorstop)); }
      background-image: linear-gradient(($standardDir, $colorstop));
    }
    @else { /* error: $standardDir */ }
  }
  @else { /* error: no $colorstop */ }
}

// tests
.deg1 { @include -linear-gradient(0deg, #fff, #eee); }
.deg2 { @include -linear-gradient(90deg, #fff, #eee); }
.deg3 { @include -linear-gradient(200deg, #fff 30%, #eee); }
.deg4 { @include -linear-gradient(300deg, #fff 30%, #eee 50%); }
.deg5 { @include -linear-gradient(0deg, #fff 30%, #eee 50%); }

.color1 { @include -linear-gradient(#fff, #eee); }
.color2 { @include -linear-gradient(#fff, #eee, #ddd); }
.color3 { @include -linear-gradient(#fff, #eee 30%, #ddd); }
.color4 { @include -linear-gradient(#fff, #eee 30%, #ddd 50%); }

.kwd1 { @include -linear-gradient(top, #fff, #eee); }
.kwd2 { @include -linear-gradient(top, #fff 30%, #eee); }
.kwd3 { @include -linear-gradient(right, #fff, #eee); }
.kwd4 { @include -linear-gradient(right, #fff 30%, #eee); }
.kwd5 { @include -linear-gradient(top right, #fff, #eee); }
.kwd6 { @include -linear-gradient(top right, #fff 30%, #eee); }
.kwd7 { @include -linear-gradient(bottom left, #fff, #eee); }
.kwd8 { @include -linear-gradient(bottom left, #fff 30%, #eee); }
.kwd9 { @include -linear-gradient(bottom left, #fff 30%, #eee 50%); }